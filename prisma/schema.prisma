
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tournament {
  id          String   @id @default(uuid())
  name        String
  description String?
  matchDate   DateTime 
  team1       String   
  team2       String   
  venue       String?
  currentParticipants Int @default(0) 
  status      TournamentStatus @default(UPCOMING)
  eligiblePlayers String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  matchId     String?
  
  playerScores PlayerScore[]
  rewardPools RewardPool?
  snapshots Snapshot[]
  
  @@map("tournaments")
}

model PlayerScore {
  id          String   @id @default(uuid())
  tournamentId String
  moduleName  String?  
  runs        Int      @default(0)
  ballsFaced  Int      @default(0)
  wickets     Int      @default(0)
  oversBowled Decimal  @default(0)
  runsConceded Int     @default(0)
  catches     Int      @default(0)
  stumpings   Int      @default(0)
  runOuts     Int      @default(0)
  fantasyPoints Decimal @default(0) 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  tournament  Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  
  @@unique([tournamentId, moduleName])
  @@map("player_scores")
}

model RewardPool {
  id          String   @id @default(uuid())
  tournamentId String @unique
  name        String
  totalAmount Decimal  
  distributedAmount Decimal @default(0) 
  distributionType RewardDistributionType @default(PERCENTAGE)
  distributionRules Json 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tournament  Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  rewards     UserReward[]
  
  @@map("reward_pools")
}

model UserReward {
  id          String   @id @default(uuid())
  address     String  
  rewardPoolId String
  amount      Decimal  @default(0) 
  percentage  Decimal? 
  status      RewardStatus @default(PENDING)
  transactionId String? 
  metadata    Json?   
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  rewardPool  RewardPool @relation(fields: [rewardPoolId], references: [id], onDelete: Cascade)
  
  @@map("user_rewards")
}

model Snapshot {
  id          String   @id @default(uuid())
  tournamentId    String     
  snapshotType SnapshotType
  contractAddress String
  blockNumber BigInt
  data        Json     
  createdAt   DateTime @default(now())
  
  tournament  Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  @@index([tournamentId, snapshotType]) 
  @@unique([tournamentId, snapshotType])
  @@map("snapshots")
}

model User {
  id          String   @id @default(uuid())
  address     String   @unique 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("users")
}

// Enums
enum TournamentStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}


enum RewardDistributionType {
  PERCENTAGE
  FIXED_AMOUNT
  TIER_BASED
}

enum RewardStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum SnapshotType {
  PRE_MATCH
  POST_MATCH
}